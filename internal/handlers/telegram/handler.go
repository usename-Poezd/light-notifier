package telegram

import (
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/usename-Poezd/light-notifier/internal/domain"
	"github.com/usename-Poezd/light-notifier/internal/services"
)

type Handler struct {
	Services *services.Services
}

func NewHandler(services *services.Services) *Handler {
	return &Handler{
		Services: services,
	}
}

func (h *Handler) Init(bot *tgbotapi.BotAPI) {
	//–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	//–ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		switch update.Message.Text {
		case "/start":

			_, err := h.Services.Users.Create(&domain.User{
				Id: 0,
				ChatId: update.Message.Chat.ID,
			})
			if err != nil {
				log.Fatalln(err.Error())
			}
			//–û—Ç–ø—Ä–∞–≤–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			msg := tgbotapi.NewMessage(
				update.Message.Chat.ID, 
				"üëã–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞! \n" +
				"–ö–∞–∂–¥—ã–π 30 –º–∏–Ω—É—Ç —è –ø—Ä–æ–≤–µ—Ä—è—é —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –ø—É—Ç–µ–º ping'–∞ –¥–æ–º–µ–Ω–∞ —Ä–æ—É—Ç–µ—Ä–∞. \n \n"+

				`–ï—Å–ª–∏ –≤—ã –Ω–∞—á–∞–ª–∏ –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π, —Ç–æ –≤—ã —É–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.` + "\n\n" +

				`–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:` + "\n" +
				"- /check - –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞\n" +
				"- /off - –≤—ã—Ä—É–±–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n" +
				"- /on - –≤—Ä—É–±–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
			)
			bot.Send(msg)

		case "/check":
			err := h.Services.Keenetic.Check()
			msg := "‚úÖ OK \n –í—Å–µ –∫—Ä—É—Ç–æ, —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–æ–≤ –µ—Å—Ç—å! üí°"
			if err != nil {
				msg = "‚ö†Ô∏è –û–®–ò–ë–ö–ê ‚ö†Ô∏è\n –†–æ—É—Ç–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—Ç—É!"
			}

			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, msg))
		
		case "/off":
			h.Services.Notification.Off()
			

			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
		case "/on":
			h.Services.Notification.On()
			
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
		}
	}
}
